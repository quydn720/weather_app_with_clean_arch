// Mocks generated by Mockito 5.0.14 from annotations
// in weather_app_w_clean_architeture/test/lib/features/weather/domain/repositories/weather_repository_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:weather_app_w_clean_architeture/core/location/location.dart'
    as _i3;
import 'package:weather_app_w_clean_architeture/features/weather/data/models/weather_model.dart'
    as _i2;

import 'weather_repository_impl_test.dart' as _i4;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

// ignore: camel_case_types
class _FakeWeatherModel_0 extends _i1.Fake implements _i2.WeatherModel {}

// ignore: camel_case_types
class _FakeLocation_1 extends _i1.Fake implements _i3.Location {}

/// A class which mocks [NetworkInfoT].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i4.NetworkInfoT {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<bool> get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [RemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteDataSource extends _i1.Mock implements _i4.RemoteDataSource {
  MockRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String toString() => super.toString();
  @override
  _i5.Future<_i2.WeatherModel> getWeatherByLocation() => (super.noSuchMethod(
          Invocation.method(#getWeatherByLocation, []),
          returnValue: Future<_i2.WeatherModel>.value(_FakeWeatherModel_0()))
      as _i5.Future<_i2.WeatherModel>);
  @override
  _i5.Future<_i2.WeatherModel> getWeatherByCityName(String? city) =>
      (super.noSuchMethod(Invocation.method(#getWeatherByCityName, [city]),
              returnValue:
                  Future<_i2.WeatherModel>.value(_FakeWeatherModel_0()))
          as _i5.Future<_i2.WeatherModel>);
}

/// A class which mocks [LocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalDataSource extends _i1.Mock implements _i4.LocalDataSource {
  MockLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String toString() => super.toString();
  @override
  _i5.Future<_i2.WeatherModel> getLastWeather() => (super.noSuchMethod(
          Invocation.method(#getLastWeather, []),
          returnValue: Future<_i2.WeatherModel>.value(_FakeWeatherModel_0()))
      as _i5.Future<_i2.WeatherModel>);
  @override
  _i5.Future<void> cacheWeather(_i2.WeatherModel? weatherModel) =>
      (super.noSuchMethod(Invocation.method(#cacheWeather, [weatherModel]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
}

/// A class which mocks [LocationInfoT].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationInfo extends _i1.Mock implements _i4.LocationInfoT {
  MockLocationInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Location> get location =>
      (super.noSuchMethod(Invocation.getter(#location),
              returnValue: Future<_i3.Location>.value(_FakeLocation_1()))
          as _i5.Future<_i3.Location>);
  @override
  String toString() => super.toString();
}
